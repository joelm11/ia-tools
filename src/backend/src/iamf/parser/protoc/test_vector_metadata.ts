// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: test_vector_metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "iamf_tools_cli_proto";

export enum Leb128GeneratorMode {
  GENERATE_LEB_INVALID = 0,
  /** GENERATE_LEB_MINIMUM - Generate values using the minimum number of bytes. */
  GENERATE_LEB_MINIMUM = 1,
  /** GENERATE_LEB_FIXED_SIZE - Generate values using the target of bytes. */
  GENERATE_LEB_FIXED_SIZE = 2,
  UNRECOGNIZED = -1,
}

export function leb128GeneratorModeFromJSON(object: any): Leb128GeneratorMode {
  switch (object) {
    case 0:
    case "GENERATE_LEB_INVALID":
      return Leb128GeneratorMode.GENERATE_LEB_INVALID;
    case 1:
    case "GENERATE_LEB_MINIMUM":
      return Leb128GeneratorMode.GENERATE_LEB_MINIMUM;
    case 2:
    case "GENERATE_LEB_FIXED_SIZE":
      return Leb128GeneratorMode.GENERATE_LEB_FIXED_SIZE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Leb128GeneratorMode.UNRECOGNIZED;
  }
}

export function leb128GeneratorModeToJSON(object: Leb128GeneratorMode): string {
  switch (object) {
    case Leb128GeneratorMode.GENERATE_LEB_INVALID:
      return "GENERATE_LEB_INVALID";
    case Leb128GeneratorMode.GENERATE_LEB_MINIMUM:
      return "GENERATE_LEB_MINIMUM";
    case Leb128GeneratorMode.GENERATE_LEB_FIXED_SIZE:
      return "GENERATE_LEB_FIXED_SIZE";
    case Leb128GeneratorMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Leb128Generator {
  mode?:
    | Leb128GeneratorMode
    | undefined;
  /**
   * Configures the target number of bytes when using `GENERATE_LEB_FIXED_SIZE`
   * mode.
   */
  fixedSize?: number | undefined;
}

/**
 * Metadata to describe and annotate test vectors. For historical reasons, some
 * of the fields here are used to control encoder behavior.
 */
export interface TestVectorMetadata {
  humanReadableDescription?:
    | string
    | undefined;
  /**
   * Prefix of the output file names. Leave empty to skip writing to output
   * files.
   */
  fileNamePrefix?:
    | string
    | undefined;
  /**
   * TODO(b/269708630): Rename `is_valid` to `is_valid_to_encode`.
   * `true` when all mixes are valid to encode. Mixes may be invalid if they
   * contain any mixes that use certain reserved values, or if they exercise any
   * features which are not supported by the encoder.
   */
  isValid?:
    | boolean
    | undefined;
  /**
   * `true` when a compliant decoder would decode at least one valid mix. Some
   * other mixes may be invalid or use reserved values which may be ignored.
   */
  isValidToDecode?:
    | boolean
    | undefined;
  /**
   * Tags to identify the repository this test vector belongs to. A repository
   * could be a git branch or it could refer to some other way to organize a
   * test suite.
   *
   * Some canonical tags are used to identify which GitHub branch(es) the test
   * vector should be synchronized with.
   *
   * `github/aomediacodec/libiamf/main`: Used on the `main` branch of
   *     https://github.com/AOMediaCodec/libiamf
   * `github/aomediacodec/libiamf/v1.0.0-errata`: Used on the `v1.0.0-errata`
   *     branch of https://github.com/AOMediaCodec/libiamf
   */
  testRepositoryTags: string[];
  primaryTestedSpecSections: string[];
  baseTest?:
    | string
    | undefined;
  /** MP4 controls. */
  mp4FixedTimestamp?: string | undefined;
  msPerFragment?:
    | number
    | undefined;
  /**
   * TODO(b/309461674): Deprecate and add a mode in `EncoderControlMetadata` to
   *                    use the computed gains, without checking the
   *                    user-provided gains.
   * `false` to check that user-provided recon gains match the computed gains.
   * `true` to override the computed recon gains with the user-provided gains.
   */
  overrideComputedReconGains?:
    | boolean
    | undefined;
  /**
   * Controls whether to validate the user-provided loudness against the
   * computed loudness.
   */
  validateUserLoudness?:
    | boolean
    | undefined;
  /**
   * TODO(b/390392510): Migrate to `EncoderControlMetadata` and update to limit
   *                    the possible values.
   * An override to control the output bit-depth of the output `rendered` wav
   * file. Or 0, to use a default bit-depth depending on the bitstream. The
   * value may be clamped to a supported-bit depth.
   */
  outputWavFileBitDepthOverride?:
    | number
    | undefined;
  /**
   * `true` partitions the input mix gain parameter blocks to be aligned with
   * single frames. The `param_definition` in the descriptor OBUs must be
   * accurate.
   */
  partitionMixGainParameterBlocks?:
    | boolean
    | undefined;
  /** Settings to configure how `Leb128`s are generated. */
  lebGenerator?: Leb128Generator | undefined;
}

function createBaseLeb128Generator(): Leb128Generator {
  return { mode: 1, fixedSize: 5 };
}

export const Leb128Generator: MessageFns<Leb128Generator> = {
  encode(message: Leb128Generator, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mode !== undefined && message.mode !== 1) {
      writer.uint32(8).int32(message.mode);
    }
    if (message.fixedSize !== undefined && message.fixedSize !== 5) {
      writer.uint32(16).int32(message.fixedSize);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Leb128Generator {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeb128Generator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.mode = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fixedSize = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Leb128Generator {
    return {
      mode: isSet(object.mode) ? leb128GeneratorModeFromJSON(object.mode) : 1,
      fixedSize: isSet(object.fixedSize) ? globalThis.Number(object.fixedSize) : 5,
    };
  },

  toJSON(message: Leb128Generator): unknown {
    const obj: any = {};
    if (message.mode !== undefined && message.mode !== 1) {
      obj.mode = leb128GeneratorModeToJSON(message.mode);
    }
    if (message.fixedSize !== undefined && message.fixedSize !== 5) {
      obj.fixedSize = Math.round(message.fixedSize);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Leb128Generator>, I>>(base?: I): Leb128Generator {
    return Leb128Generator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Leb128Generator>, I>>(object: I): Leb128Generator {
    const message = createBaseLeb128Generator();
    message.mode = object.mode ?? 1;
    message.fixedSize = object.fixedSize ?? 5;
    return message;
  },
};

function createBaseTestVectorMetadata(): TestVectorMetadata {
  return {
    humanReadableDescription: "",
    fileNamePrefix: "",
    isValid: false,
    isValidToDecode: true,
    testRepositoryTags: [],
    primaryTestedSpecSections: [],
    baseTest: "",
    mp4FixedTimestamp: "",
    msPerFragment: 10000,
    overrideComputedReconGains: false,
    validateUserLoudness: false,
    outputWavFileBitDepthOverride: 0,
    partitionMixGainParameterBlocks: true,
    lebGenerator: undefined,
  };
}

export const TestVectorMetadata: MessageFns<TestVectorMetadata> = {
  encode(message: TestVectorMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.humanReadableDescription !== undefined && message.humanReadableDescription !== "") {
      writer.uint32(10).string(message.humanReadableDescription);
    }
    if (message.fileNamePrefix !== undefined && message.fileNamePrefix !== "") {
      writer.uint32(18).string(message.fileNamePrefix);
    }
    if (message.isValid !== undefined && message.isValid !== false) {
      writer.uint32(24).bool(message.isValid);
    }
    if (message.isValidToDecode !== undefined && message.isValidToDecode !== true) {
      writer.uint32(112).bool(message.isValidToDecode);
    }
    for (const v of message.testRepositoryTags) {
      writer.uint32(122).string(v!);
    }
    for (const v of message.primaryTestedSpecSections) {
      writer.uint32(50).string(v!);
    }
    if (message.baseTest !== undefined && message.baseTest !== "") {
      writer.uint32(58).string(message.baseTest);
    }
    if (message.mp4FixedTimestamp !== undefined && message.mp4FixedTimestamp !== "") {
      writer.uint32(34).string(message.mp4FixedTimestamp);
    }
    if (message.msPerFragment !== undefined && message.msPerFragment !== 10000) {
      writer.uint32(64).int32(message.msPerFragment);
    }
    if (message.overrideComputedReconGains !== undefined && message.overrideComputedReconGains !== false) {
      writer.uint32(72).bool(message.overrideComputedReconGains);
    }
    if (message.validateUserLoudness !== undefined && message.validateUserLoudness !== false) {
      writer.uint32(104).bool(message.validateUserLoudness);
    }
    if (message.outputWavFileBitDepthOverride !== undefined && message.outputWavFileBitDepthOverride !== 0) {
      writer.uint32(96).uint32(message.outputWavFileBitDepthOverride);
    }
    if (message.partitionMixGainParameterBlocks !== undefined && message.partitionMixGainParameterBlocks !== true) {
      writer.uint32(80).bool(message.partitionMixGainParameterBlocks);
    }
    if (message.lebGenerator !== undefined) {
      Leb128Generator.encode(message.lebGenerator, writer.uint32(90).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TestVectorMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTestVectorMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.humanReadableDescription = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fileNamePrefix = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isValid = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.isValidToDecode = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.testRepositoryTags.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.primaryTestedSpecSections.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.baseTest = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mp4FixedTimestamp = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.msPerFragment = reader.int32();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.overrideComputedReconGains = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.validateUserLoudness = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.outputWavFileBitDepthOverride = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.partitionMixGainParameterBlocks = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.lebGenerator = Leb128Generator.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TestVectorMetadata {
    return {
      humanReadableDescription: isSet(object.humanReadableDescription)
        ? globalThis.String(object.humanReadableDescription)
        : "",
      fileNamePrefix: isSet(object.fileNamePrefix) ? globalThis.String(object.fileNamePrefix) : "",
      isValid: isSet(object.isValid) ? globalThis.Boolean(object.isValid) : false,
      isValidToDecode: isSet(object.isValidToDecode) ? globalThis.Boolean(object.isValidToDecode) : true,
      testRepositoryTags: globalThis.Array.isArray(object?.testRepositoryTags)
        ? object.testRepositoryTags.map((e: any) => globalThis.String(e))
        : [],
      primaryTestedSpecSections: globalThis.Array.isArray(object?.primaryTestedSpecSections)
        ? object.primaryTestedSpecSections.map((e: any) => globalThis.String(e))
        : [],
      baseTest: isSet(object.baseTest) ? globalThis.String(object.baseTest) : "",
      mp4FixedTimestamp: isSet(object.mp4FixedTimestamp) ? globalThis.String(object.mp4FixedTimestamp) : "",
      msPerFragment: isSet(object.msPerFragment) ? globalThis.Number(object.msPerFragment) : 10000,
      overrideComputedReconGains: isSet(object.overrideComputedReconGains)
        ? globalThis.Boolean(object.overrideComputedReconGains)
        : false,
      validateUserLoudness: isSet(object.validateUserLoudness)
        ? globalThis.Boolean(object.validateUserLoudness)
        : false,
      outputWavFileBitDepthOverride: isSet(object.outputWavFileBitDepthOverride)
        ? globalThis.Number(object.outputWavFileBitDepthOverride)
        : 0,
      partitionMixGainParameterBlocks: isSet(object.partitionMixGainParameterBlocks)
        ? globalThis.Boolean(object.partitionMixGainParameterBlocks)
        : true,
      lebGenerator: isSet(object.lebGenerator) ? Leb128Generator.fromJSON(object.lebGenerator) : undefined,
    };
  },

  toJSON(message: TestVectorMetadata): unknown {
    const obj: any = {};
    if (message.humanReadableDescription !== undefined && message.humanReadableDescription !== "") {
      obj.humanReadableDescription = message.humanReadableDescription;
    }
    if (message.fileNamePrefix !== undefined && message.fileNamePrefix !== "") {
      obj.fileNamePrefix = message.fileNamePrefix;
    }
    if (message.isValid !== undefined && message.isValid !== false) {
      obj.isValid = message.isValid;
    }
    if (message.isValidToDecode !== undefined && message.isValidToDecode !== true) {
      obj.isValidToDecode = message.isValidToDecode;
    }
    if (message.testRepositoryTags?.length) {
      obj.testRepositoryTags = message.testRepositoryTags;
    }
    if (message.primaryTestedSpecSections?.length) {
      obj.primaryTestedSpecSections = message.primaryTestedSpecSections;
    }
    if (message.baseTest !== undefined && message.baseTest !== "") {
      obj.baseTest = message.baseTest;
    }
    if (message.mp4FixedTimestamp !== undefined && message.mp4FixedTimestamp !== "") {
      obj.mp4FixedTimestamp = message.mp4FixedTimestamp;
    }
    if (message.msPerFragment !== undefined && message.msPerFragment !== 10000) {
      obj.msPerFragment = Math.round(message.msPerFragment);
    }
    if (message.overrideComputedReconGains !== undefined && message.overrideComputedReconGains !== false) {
      obj.overrideComputedReconGains = message.overrideComputedReconGains;
    }
    if (message.validateUserLoudness !== undefined && message.validateUserLoudness !== false) {
      obj.validateUserLoudness = message.validateUserLoudness;
    }
    if (message.outputWavFileBitDepthOverride !== undefined && message.outputWavFileBitDepthOverride !== 0) {
      obj.outputWavFileBitDepthOverride = Math.round(message.outputWavFileBitDepthOverride);
    }
    if (message.partitionMixGainParameterBlocks !== undefined && message.partitionMixGainParameterBlocks !== true) {
      obj.partitionMixGainParameterBlocks = message.partitionMixGainParameterBlocks;
    }
    if (message.lebGenerator !== undefined) {
      obj.lebGenerator = Leb128Generator.toJSON(message.lebGenerator);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TestVectorMetadata>, I>>(base?: I): TestVectorMetadata {
    return TestVectorMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TestVectorMetadata>, I>>(object: I): TestVectorMetadata {
    const message = createBaseTestVectorMetadata();
    message.humanReadableDescription = object.humanReadableDescription ?? "";
    message.fileNamePrefix = object.fileNamePrefix ?? "";
    message.isValid = object.isValid ?? false;
    message.isValidToDecode = object.isValidToDecode ?? true;
    message.testRepositoryTags = object.testRepositoryTags?.map((e) => e) || [];
    message.primaryTestedSpecSections = object.primaryTestedSpecSections?.map((e) => e) || [];
    message.baseTest = object.baseTest ?? "";
    message.mp4FixedTimestamp = object.mp4FixedTimestamp ?? "";
    message.msPerFragment = object.msPerFragment ?? 10000;
    message.overrideComputedReconGains = object.overrideComputedReconGains ?? false;
    message.validateUserLoudness = object.validateUserLoudness ?? false;
    message.outputWavFileBitDepthOverride = object.outputWavFileBitDepthOverride ?? 0;
    message.partitionMixGainParameterBlocks = object.partitionMixGainParameterBlocks ?? true;
    message.lebGenerator = (object.lebGenerator !== undefined && object.lebGenerator !== null)
      ? Leb128Generator.fromPartial(object.lebGenerator)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
