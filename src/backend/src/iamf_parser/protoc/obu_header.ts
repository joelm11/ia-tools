// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: obu_header.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "iamf_tools_cli_proto";

export interface ObuHeaderMetadata {
  obuRedundantCopy?: boolean | undefined;
  obuTrimmingStatusFlag?: boolean | undefined;
  obuExtensionFlag?: boolean | undefined;
  numSamplesToTrimAtEnd?: number | undefined;
  numSamplesToTrimAtStart?: number | undefined;
  extensionHeaderSize?: number | undefined;
  extensionHeaderBytes?: Uint8Array | undefined;
}

function createBaseObuHeaderMetadata(): ObuHeaderMetadata {
  return {
    obuRedundantCopy: false,
    obuTrimmingStatusFlag: false,
    obuExtensionFlag: false,
    numSamplesToTrimAtEnd: 0,
    numSamplesToTrimAtStart: 0,
    extensionHeaderSize: 0,
    extensionHeaderBytes: new Uint8Array(0),
  };
}

export const ObuHeaderMetadata: MessageFns<ObuHeaderMetadata> = {
  encode(message: ObuHeaderMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.obuRedundantCopy !== undefined && message.obuRedundantCopy !== false) {
      writer.uint32(16).bool(message.obuRedundantCopy);
    }
    if (message.obuTrimmingStatusFlag !== undefined && message.obuTrimmingStatusFlag !== false) {
      writer.uint32(24).bool(message.obuTrimmingStatusFlag);
    }
    if (message.obuExtensionFlag !== undefined && message.obuExtensionFlag !== false) {
      writer.uint32(32).bool(message.obuExtensionFlag);
    }
    if (message.numSamplesToTrimAtEnd !== undefined && message.numSamplesToTrimAtEnd !== 0) {
      writer.uint32(48).uint32(message.numSamplesToTrimAtEnd);
    }
    if (message.numSamplesToTrimAtStart !== undefined && message.numSamplesToTrimAtStart !== 0) {
      writer.uint32(56).uint32(message.numSamplesToTrimAtStart);
    }
    if (message.extensionHeaderSize !== undefined && message.extensionHeaderSize !== 0) {
      writer.uint32(64).uint32(message.extensionHeaderSize);
    }
    if (message.extensionHeaderBytes !== undefined && message.extensionHeaderBytes.length !== 0) {
      writer.uint32(74).bytes(message.extensionHeaderBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ObuHeaderMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseObuHeaderMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.obuRedundantCopy = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.obuTrimmingStatusFlag = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.obuExtensionFlag = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.numSamplesToTrimAtEnd = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.numSamplesToTrimAtStart = reader.uint32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.extensionHeaderSize = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.extensionHeaderBytes = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ObuHeaderMetadata {
    return {
      obuRedundantCopy: isSet(object.obuRedundantCopy) ? globalThis.Boolean(object.obuRedundantCopy) : false,
      obuTrimmingStatusFlag: isSet(object.obuTrimmingStatusFlag)
        ? globalThis.Boolean(object.obuTrimmingStatusFlag)
        : false,
      obuExtensionFlag: isSet(object.obuExtensionFlag) ? globalThis.Boolean(object.obuExtensionFlag) : false,
      numSamplesToTrimAtEnd: isSet(object.numSamplesToTrimAtEnd) ? globalThis.Number(object.numSamplesToTrimAtEnd) : 0,
      numSamplesToTrimAtStart: isSet(object.numSamplesToTrimAtStart)
        ? globalThis.Number(object.numSamplesToTrimAtStart)
        : 0,
      extensionHeaderSize: isSet(object.extensionHeaderSize) ? globalThis.Number(object.extensionHeaderSize) : 0,
      extensionHeaderBytes: isSet(object.extensionHeaderBytes)
        ? bytesFromBase64(object.extensionHeaderBytes)
        : new Uint8Array(0),
    };
  },

  toJSON(message: ObuHeaderMetadata): unknown {
    const obj: any = {};
    if (message.obuRedundantCopy !== undefined && message.obuRedundantCopy !== false) {
      obj.obuRedundantCopy = message.obuRedundantCopy;
    }
    if (message.obuTrimmingStatusFlag !== undefined && message.obuTrimmingStatusFlag !== false) {
      obj.obuTrimmingStatusFlag = message.obuTrimmingStatusFlag;
    }
    if (message.obuExtensionFlag !== undefined && message.obuExtensionFlag !== false) {
      obj.obuExtensionFlag = message.obuExtensionFlag;
    }
    if (message.numSamplesToTrimAtEnd !== undefined && message.numSamplesToTrimAtEnd !== 0) {
      obj.numSamplesToTrimAtEnd = Math.round(message.numSamplesToTrimAtEnd);
    }
    if (message.numSamplesToTrimAtStart !== undefined && message.numSamplesToTrimAtStart !== 0) {
      obj.numSamplesToTrimAtStart = Math.round(message.numSamplesToTrimAtStart);
    }
    if (message.extensionHeaderSize !== undefined && message.extensionHeaderSize !== 0) {
      obj.extensionHeaderSize = Math.round(message.extensionHeaderSize);
    }
    if (message.extensionHeaderBytes !== undefined && message.extensionHeaderBytes.length !== 0) {
      obj.extensionHeaderBytes = base64FromBytes(message.extensionHeaderBytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ObuHeaderMetadata>, I>>(base?: I): ObuHeaderMetadata {
    return ObuHeaderMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ObuHeaderMetadata>, I>>(object: I): ObuHeaderMetadata {
    const message = createBaseObuHeaderMetadata();
    message.obuRedundantCopy = object.obuRedundantCopy ?? false;
    message.obuTrimmingStatusFlag = object.obuTrimmingStatusFlag ?? false;
    message.obuExtensionFlag = object.obuExtensionFlag ?? false;
    message.numSamplesToTrimAtEnd = object.numSamplesToTrimAtEnd ?? 0;
    message.numSamplesToTrimAtStart = object.numSamplesToTrimAtStart ?? 0;
    message.extensionHeaderSize = object.extensionHeaderSize ?? 0;
    message.extensionHeaderBytes = object.extensionHeaderBytes ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
