// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: param_definitions.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DemixingInfoParameterData } from "./parameter_data";

export const protobufPackage = "iamf_tools_cli_proto";

/**
 * Valid proto enums start at index 1, which are different from the
 * corresponding enums in C++, e.g. kParameterDefinitionMixGain = 0.
 */
export enum ParamDefinitionType {
  PARAM_DEFINITION_TYPE_INVALID = 0,
  PARAM_DEFINITION_TYPE_MIX_GAIN = 1,
  PARAM_DEFINITION_TYPE_DEMIXING = 2,
  PARAM_DEFINITION_TYPE_RECON_GAIN = 3,
  PARAM_DEFINITION_TYPE_RESERVED_3 = 4,
  UNRECOGNIZED = -1,
}

export function paramDefinitionTypeFromJSON(object: any): ParamDefinitionType {
  switch (object) {
    case 0:
    case "PARAM_DEFINITION_TYPE_INVALID":
      return ParamDefinitionType.PARAM_DEFINITION_TYPE_INVALID;
    case 1:
    case "PARAM_DEFINITION_TYPE_MIX_GAIN":
      return ParamDefinitionType.PARAM_DEFINITION_TYPE_MIX_GAIN;
    case 2:
    case "PARAM_DEFINITION_TYPE_DEMIXING":
      return ParamDefinitionType.PARAM_DEFINITION_TYPE_DEMIXING;
    case 3:
    case "PARAM_DEFINITION_TYPE_RECON_GAIN":
      return ParamDefinitionType.PARAM_DEFINITION_TYPE_RECON_GAIN;
    case 4:
    case "PARAM_DEFINITION_TYPE_RESERVED_3":
      return ParamDefinitionType.PARAM_DEFINITION_TYPE_RESERVED_3;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ParamDefinitionType.UNRECOGNIZED;
  }
}

export function paramDefinitionTypeToJSON(object: ParamDefinitionType): string {
  switch (object) {
    case ParamDefinitionType.PARAM_DEFINITION_TYPE_INVALID:
      return "PARAM_DEFINITION_TYPE_INVALID";
    case ParamDefinitionType.PARAM_DEFINITION_TYPE_MIX_GAIN:
      return "PARAM_DEFINITION_TYPE_MIX_GAIN";
    case ParamDefinitionType.PARAM_DEFINITION_TYPE_DEMIXING:
      return "PARAM_DEFINITION_TYPE_DEMIXING";
    case ParamDefinitionType.PARAM_DEFINITION_TYPE_RECON_GAIN:
      return "PARAM_DEFINITION_TYPE_RECON_GAIN";
    case ParamDefinitionType.PARAM_DEFINITION_TYPE_RESERVED_3:
      return "PARAM_DEFINITION_TYPE_RESERVED_3";
    case ParamDefinitionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ParamDefinition {
  parameterId?: number | undefined;
  parameterRate?: number | undefined;
  paramDefinitionMode?: boolean | undefined;
  reserved?: number | undefined;
  duration?: number | undefined;
  constantSubblockDuration?: number | undefined;
  numSubblocks?: number | undefined;
  subblockDurations: number[];
}

/**
 * Values are represented to align with the IAMF spec.
 *
 * See
 * https://aomediacodec.github.io/iamf/v1.1.0.html#syntax-mixgain-parameter-definition
 * for further details.
 *
 * To convert from dB to Q7.8, multiply by 256. Example:
 *  - For -3 dB, set the proto value to 256 * -3 = -768.
 *  - For +6 dB, set the proto value to 256 * 6 = 1536.
 */
export interface MixGainParamDefinition {
  paramDefinition?:
    | ParamDefinition
    | undefined;
  /** Q7.8. */
  defaultMixGain?: number | undefined;
}

export interface DemixingParamDefinition {
  paramDefinition?: ParamDefinition | undefined;
  defaultDemixingInfoParameterData?: DemixingInfoParameterData | undefined;
  defaultW?: number | undefined;
  reserved?: number | undefined;
}

export interface ReconGainParamDefinition {
  paramDefinition?: ParamDefinition | undefined;
}

function createBaseParamDefinition(): ParamDefinition {
  return {
    parameterId: 0,
    parameterRate: 0,
    paramDefinitionMode: false,
    reserved: 0,
    duration: 0,
    constantSubblockDuration: 0,
    numSubblocks: 0,
    subblockDurations: [],
  };
}

export const ParamDefinition: MessageFns<ParamDefinition> = {
  encode(message: ParamDefinition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parameterId !== undefined && message.parameterId !== 0) {
      writer.uint32(8).uint32(message.parameterId);
    }
    if (message.parameterRate !== undefined && message.parameterRate !== 0) {
      writer.uint32(16).uint32(message.parameterRate);
    }
    if (message.paramDefinitionMode !== undefined && message.paramDefinitionMode !== false) {
      writer.uint32(24).bool(message.paramDefinitionMode);
    }
    if (message.reserved !== undefined && message.reserved !== 0) {
      writer.uint32(32).uint32(message.reserved);
    }
    if (message.duration !== undefined && message.duration !== 0) {
      writer.uint32(40).uint32(message.duration);
    }
    if (message.constantSubblockDuration !== undefined && message.constantSubblockDuration !== 0) {
      writer.uint32(56).uint32(message.constantSubblockDuration);
    }
    if (message.numSubblocks !== undefined && message.numSubblocks !== 0) {
      writer.uint32(48).uint32(message.numSubblocks);
    }
    writer.uint32(66).fork();
    for (const v of message.subblockDurations) {
      writer.uint32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParamDefinition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParamDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.parameterId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.parameterRate = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.paramDefinitionMode = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.reserved = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.duration = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.constantSubblockDuration = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.numSubblocks = reader.uint32();
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.subblockDurations.push(reader.uint32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.subblockDurations.push(reader.uint32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParamDefinition {
    return {
      parameterId: isSet(object.parameterId) ? globalThis.Number(object.parameterId) : 0,
      parameterRate: isSet(object.parameterRate) ? globalThis.Number(object.parameterRate) : 0,
      paramDefinitionMode: isSet(object.paramDefinitionMode) ? globalThis.Boolean(object.paramDefinitionMode) : false,
      reserved: isSet(object.reserved) ? globalThis.Number(object.reserved) : 0,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      constantSubblockDuration: isSet(object.constantSubblockDuration)
        ? globalThis.Number(object.constantSubblockDuration)
        : 0,
      numSubblocks: isSet(object.numSubblocks) ? globalThis.Number(object.numSubblocks) : 0,
      subblockDurations: globalThis.Array.isArray(object?.subblockDurations)
        ? object.subblockDurations.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: ParamDefinition): unknown {
    const obj: any = {};
    if (message.parameterId !== undefined && message.parameterId !== 0) {
      obj.parameterId = Math.round(message.parameterId);
    }
    if (message.parameterRate !== undefined && message.parameterRate !== 0) {
      obj.parameterRate = Math.round(message.parameterRate);
    }
    if (message.paramDefinitionMode !== undefined && message.paramDefinitionMode !== false) {
      obj.paramDefinitionMode = message.paramDefinitionMode;
    }
    if (message.reserved !== undefined && message.reserved !== 0) {
      obj.reserved = Math.round(message.reserved);
    }
    if (message.duration !== undefined && message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.constantSubblockDuration !== undefined && message.constantSubblockDuration !== 0) {
      obj.constantSubblockDuration = Math.round(message.constantSubblockDuration);
    }
    if (message.numSubblocks !== undefined && message.numSubblocks !== 0) {
      obj.numSubblocks = Math.round(message.numSubblocks);
    }
    if (message.subblockDurations?.length) {
      obj.subblockDurations = message.subblockDurations.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParamDefinition>, I>>(base?: I): ParamDefinition {
    return ParamDefinition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParamDefinition>, I>>(object: I): ParamDefinition {
    const message = createBaseParamDefinition();
    message.parameterId = object.parameterId ?? 0;
    message.parameterRate = object.parameterRate ?? 0;
    message.paramDefinitionMode = object.paramDefinitionMode ?? false;
    message.reserved = object.reserved ?? 0;
    message.duration = object.duration ?? 0;
    message.constantSubblockDuration = object.constantSubblockDuration ?? 0;
    message.numSubblocks = object.numSubblocks ?? 0;
    message.subblockDurations = object.subblockDurations?.map((e) => e) || [];
    return message;
  },
};

function createBaseMixGainParamDefinition(): MixGainParamDefinition {
  return { paramDefinition: undefined, defaultMixGain: 0 };
}

export const MixGainParamDefinition: MessageFns<MixGainParamDefinition> = {
  encode(message: MixGainParamDefinition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paramDefinition !== undefined) {
      ParamDefinition.encode(message.paramDefinition, writer.uint32(10).fork()).join();
    }
    if (message.defaultMixGain !== undefined && message.defaultMixGain !== 0) {
      writer.uint32(16).int32(message.defaultMixGain);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MixGainParamDefinition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMixGainParamDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paramDefinition = ParamDefinition.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.defaultMixGain = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MixGainParamDefinition {
    return {
      paramDefinition: isSet(object.paramDefinition) ? ParamDefinition.fromJSON(object.paramDefinition) : undefined,
      defaultMixGain: isSet(object.defaultMixGain) ? globalThis.Number(object.defaultMixGain) : 0,
    };
  },

  toJSON(message: MixGainParamDefinition): unknown {
    const obj: any = {};
    if (message.paramDefinition !== undefined) {
      obj.paramDefinition = ParamDefinition.toJSON(message.paramDefinition);
    }
    if (message.defaultMixGain !== undefined && message.defaultMixGain !== 0) {
      obj.defaultMixGain = Math.round(message.defaultMixGain);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MixGainParamDefinition>, I>>(base?: I): MixGainParamDefinition {
    return MixGainParamDefinition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MixGainParamDefinition>, I>>(object: I): MixGainParamDefinition {
    const message = createBaseMixGainParamDefinition();
    message.paramDefinition = (object.paramDefinition !== undefined && object.paramDefinition !== null)
      ? ParamDefinition.fromPartial(object.paramDefinition)
      : undefined;
    message.defaultMixGain = object.defaultMixGain ?? 0;
    return message;
  },
};

function createBaseDemixingParamDefinition(): DemixingParamDefinition {
  return { paramDefinition: undefined, defaultDemixingInfoParameterData: undefined, defaultW: 0, reserved: 0 };
}

export const DemixingParamDefinition: MessageFns<DemixingParamDefinition> = {
  encode(message: DemixingParamDefinition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paramDefinition !== undefined) {
      ParamDefinition.encode(message.paramDefinition, writer.uint32(10).fork()).join();
    }
    if (message.defaultDemixingInfoParameterData !== undefined) {
      DemixingInfoParameterData.encode(message.defaultDemixingInfoParameterData, writer.uint32(18).fork()).join();
    }
    if (message.defaultW !== undefined && message.defaultW !== 0) {
      writer.uint32(24).uint32(message.defaultW);
    }
    if (message.reserved !== undefined && message.reserved !== 0) {
      writer.uint32(32).uint32(message.reserved);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DemixingParamDefinition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDemixingParamDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paramDefinition = ParamDefinition.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.defaultDemixingInfoParameterData = DemixingInfoParameterData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.defaultW = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.reserved = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DemixingParamDefinition {
    return {
      paramDefinition: isSet(object.paramDefinition) ? ParamDefinition.fromJSON(object.paramDefinition) : undefined,
      defaultDemixingInfoParameterData: isSet(object.defaultDemixingInfoParameterData)
        ? DemixingInfoParameterData.fromJSON(object.defaultDemixingInfoParameterData)
        : undefined,
      defaultW: isSet(object.defaultW) ? globalThis.Number(object.defaultW) : 0,
      reserved: isSet(object.reserved) ? globalThis.Number(object.reserved) : 0,
    };
  },

  toJSON(message: DemixingParamDefinition): unknown {
    const obj: any = {};
    if (message.paramDefinition !== undefined) {
      obj.paramDefinition = ParamDefinition.toJSON(message.paramDefinition);
    }
    if (message.defaultDemixingInfoParameterData !== undefined) {
      obj.defaultDemixingInfoParameterData = DemixingInfoParameterData.toJSON(message.defaultDemixingInfoParameterData);
    }
    if (message.defaultW !== undefined && message.defaultW !== 0) {
      obj.defaultW = Math.round(message.defaultW);
    }
    if (message.reserved !== undefined && message.reserved !== 0) {
      obj.reserved = Math.round(message.reserved);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DemixingParamDefinition>, I>>(base?: I): DemixingParamDefinition {
    return DemixingParamDefinition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DemixingParamDefinition>, I>>(object: I): DemixingParamDefinition {
    const message = createBaseDemixingParamDefinition();
    message.paramDefinition = (object.paramDefinition !== undefined && object.paramDefinition !== null)
      ? ParamDefinition.fromPartial(object.paramDefinition)
      : undefined;
    message.defaultDemixingInfoParameterData =
      (object.defaultDemixingInfoParameterData !== undefined && object.defaultDemixingInfoParameterData !== null)
        ? DemixingInfoParameterData.fromPartial(object.defaultDemixingInfoParameterData)
        : undefined;
    message.defaultW = object.defaultW ?? 0;
    message.reserved = object.reserved ?? 0;
    return message;
  },
};

function createBaseReconGainParamDefinition(): ReconGainParamDefinition {
  return { paramDefinition: undefined };
}

export const ReconGainParamDefinition: MessageFns<ReconGainParamDefinition> = {
  encode(message: ReconGainParamDefinition, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paramDefinition !== undefined) {
      ParamDefinition.encode(message.paramDefinition, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReconGainParamDefinition {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReconGainParamDefinition();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paramDefinition = ParamDefinition.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReconGainParamDefinition {
    return {
      paramDefinition: isSet(object.paramDefinition) ? ParamDefinition.fromJSON(object.paramDefinition) : undefined,
    };
  },

  toJSON(message: ReconGainParamDefinition): unknown {
    const obj: any = {};
    if (message.paramDefinition !== undefined) {
      obj.paramDefinition = ParamDefinition.toJSON(message.paramDefinition);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReconGainParamDefinition>, I>>(base?: I): ReconGainParamDefinition {
    return ReconGainParamDefinition.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReconGainParamDefinition>, I>>(object: I): ReconGainParamDefinition {
    const message = createBaseReconGainParamDefinition();
    message.paramDefinition = (object.paramDefinition !== undefined && object.paramDefinition !== null)
      ? ParamDefinition.fromPartial(object.paramDefinition)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
