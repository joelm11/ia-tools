// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: parameter_block.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ObuHeaderMetadata } from "./obu_header";
import { DemixingInfoParameterData, MixGainParameterData, ReconGainInfoParameterData } from "./parameter_data";

export const protobufPackage = "iamf_tools_cli_proto";

export interface ParameterDataExtension {
  parameterDataSize?: number | undefined;
  parameterDataBytes?: Uint8Array | undefined;
}

export interface ParameterSubblock {
  subblockDuration?: number | undefined;
  mixGainParameterData?: MixGainParameterData | undefined;
  demixingInfoParameterData?: DemixingInfoParameterData | undefined;
  reconGainInfoParameterData?: ReconGainInfoParameterData | undefined;
  parameterDataExtension?: ParameterDataExtension | undefined;
}

export interface ParameterBlockObuMetadata {
  parameterId?: number | undefined;
  duration?: number | undefined;
  numSubblocks?: number | undefined;
  constantSubblockDuration?: number | undefined;
  subblocks: ParameterSubblock[];
  startTimestamp?: number | undefined;
  obuHeader?: ObuHeaderMetadata | undefined;
}

function createBaseParameterDataExtension(): ParameterDataExtension {
  return { parameterDataSize: 0, parameterDataBytes: new Uint8Array(0) };
}

export const ParameterDataExtension: MessageFns<ParameterDataExtension> = {
  encode(message: ParameterDataExtension, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parameterDataSize !== undefined && message.parameterDataSize !== 0) {
      writer.uint32(8).uint32(message.parameterDataSize);
    }
    if (message.parameterDataBytes !== undefined && message.parameterDataBytes.length !== 0) {
      writer.uint32(18).bytes(message.parameterDataBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParameterDataExtension {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParameterDataExtension();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.parameterDataSize = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.parameterDataBytes = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParameterDataExtension {
    return {
      parameterDataSize: isSet(object.parameterDataSize) ? globalThis.Number(object.parameterDataSize) : 0,
      parameterDataBytes: isSet(object.parameterDataBytes)
        ? bytesFromBase64(object.parameterDataBytes)
        : new Uint8Array(0),
    };
  },

  toJSON(message: ParameterDataExtension): unknown {
    const obj: any = {};
    if (message.parameterDataSize !== undefined && message.parameterDataSize !== 0) {
      obj.parameterDataSize = Math.round(message.parameterDataSize);
    }
    if (message.parameterDataBytes !== undefined && message.parameterDataBytes.length !== 0) {
      obj.parameterDataBytes = base64FromBytes(message.parameterDataBytes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParameterDataExtension>, I>>(base?: I): ParameterDataExtension {
    return ParameterDataExtension.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParameterDataExtension>, I>>(object: I): ParameterDataExtension {
    const message = createBaseParameterDataExtension();
    message.parameterDataSize = object.parameterDataSize ?? 0;
    message.parameterDataBytes = object.parameterDataBytes ?? new Uint8Array(0);
    return message;
  },
};

function createBaseParameterSubblock(): ParameterSubblock {
  return {
    subblockDuration: 0,
    mixGainParameterData: undefined,
    demixingInfoParameterData: undefined,
    reconGainInfoParameterData: undefined,
    parameterDataExtension: undefined,
  };
}

export const ParameterSubblock: MessageFns<ParameterSubblock> = {
  encode(message: ParameterSubblock, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.subblockDuration !== undefined && message.subblockDuration !== 0) {
      writer.uint32(8).uint32(message.subblockDuration);
    }
    if (message.mixGainParameterData !== undefined) {
      MixGainParameterData.encode(message.mixGainParameterData, writer.uint32(18).fork()).join();
    }
    if (message.demixingInfoParameterData !== undefined) {
      DemixingInfoParameterData.encode(message.demixingInfoParameterData, writer.uint32(26).fork()).join();
    }
    if (message.reconGainInfoParameterData !== undefined) {
      ReconGainInfoParameterData.encode(message.reconGainInfoParameterData, writer.uint32(34).fork()).join();
    }
    if (message.parameterDataExtension !== undefined) {
      ParameterDataExtension.encode(message.parameterDataExtension, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParameterSubblock {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParameterSubblock();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.subblockDuration = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mixGainParameterData = MixGainParameterData.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.demixingInfoParameterData = DemixingInfoParameterData.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.reconGainInfoParameterData = ReconGainInfoParameterData.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.parameterDataExtension = ParameterDataExtension.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParameterSubblock {
    return {
      subblockDuration: isSet(object.subblockDuration) ? globalThis.Number(object.subblockDuration) : 0,
      mixGainParameterData: isSet(object.mixGainParameterData)
        ? MixGainParameterData.fromJSON(object.mixGainParameterData)
        : undefined,
      demixingInfoParameterData: isSet(object.demixingInfoParameterData)
        ? DemixingInfoParameterData.fromJSON(object.demixingInfoParameterData)
        : undefined,
      reconGainInfoParameterData: isSet(object.reconGainInfoParameterData)
        ? ReconGainInfoParameterData.fromJSON(object.reconGainInfoParameterData)
        : undefined,
      parameterDataExtension: isSet(object.parameterDataExtension)
        ? ParameterDataExtension.fromJSON(object.parameterDataExtension)
        : undefined,
    };
  },

  toJSON(message: ParameterSubblock): unknown {
    const obj: any = {};
    if (message.subblockDuration !== undefined && message.subblockDuration !== 0) {
      obj.subblockDuration = Math.round(message.subblockDuration);
    }
    if (message.mixGainParameterData !== undefined) {
      obj.mixGainParameterData = MixGainParameterData.toJSON(message.mixGainParameterData);
    }
    if (message.demixingInfoParameterData !== undefined) {
      obj.demixingInfoParameterData = DemixingInfoParameterData.toJSON(message.demixingInfoParameterData);
    }
    if (message.reconGainInfoParameterData !== undefined) {
      obj.reconGainInfoParameterData = ReconGainInfoParameterData.toJSON(message.reconGainInfoParameterData);
    }
    if (message.parameterDataExtension !== undefined) {
      obj.parameterDataExtension = ParameterDataExtension.toJSON(message.parameterDataExtension);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParameterSubblock>, I>>(base?: I): ParameterSubblock {
    return ParameterSubblock.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParameterSubblock>, I>>(object: I): ParameterSubblock {
    const message = createBaseParameterSubblock();
    message.subblockDuration = object.subblockDuration ?? 0;
    message.mixGainParameterData = (object.mixGainParameterData !== undefined && object.mixGainParameterData !== null)
      ? MixGainParameterData.fromPartial(object.mixGainParameterData)
      : undefined;
    message.demixingInfoParameterData =
      (object.demixingInfoParameterData !== undefined && object.demixingInfoParameterData !== null)
        ? DemixingInfoParameterData.fromPartial(object.demixingInfoParameterData)
        : undefined;
    message.reconGainInfoParameterData =
      (object.reconGainInfoParameterData !== undefined && object.reconGainInfoParameterData !== null)
        ? ReconGainInfoParameterData.fromPartial(object.reconGainInfoParameterData)
        : undefined;
    message.parameterDataExtension =
      (object.parameterDataExtension !== undefined && object.parameterDataExtension !== null)
        ? ParameterDataExtension.fromPartial(object.parameterDataExtension)
        : undefined;
    return message;
  },
};

function createBaseParameterBlockObuMetadata(): ParameterBlockObuMetadata {
  return {
    parameterId: 0,
    duration: 0,
    numSubblocks: 0,
    constantSubblockDuration: 0,
    subblocks: [],
    startTimestamp: 0,
    obuHeader: undefined,
  };
}

export const ParameterBlockObuMetadata: MessageFns<ParameterBlockObuMetadata> = {
  encode(message: ParameterBlockObuMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parameterId !== undefined && message.parameterId !== 0) {
      writer.uint32(8).uint32(message.parameterId);
    }
    if (message.duration !== undefined && message.duration !== 0) {
      writer.uint32(16).uint32(message.duration);
    }
    if (message.numSubblocks !== undefined && message.numSubblocks !== 0) {
      writer.uint32(24).uint32(message.numSubblocks);
    }
    if (message.constantSubblockDuration !== undefined && message.constantSubblockDuration !== 0) {
      writer.uint32(32).uint32(message.constantSubblockDuration);
    }
    for (const v of message.subblocks) {
      ParameterSubblock.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.startTimestamp !== undefined && message.startTimestamp !== 0) {
      writer.uint32(48).int64(message.startTimestamp);
    }
    if (message.obuHeader !== undefined) {
      ObuHeaderMetadata.encode(message.obuHeader, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParameterBlockObuMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParameterBlockObuMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.parameterId = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.duration = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.numSubblocks = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.constantSubblockDuration = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.subblocks.push(ParameterSubblock.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.startTimestamp = longToNumber(reader.int64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.obuHeader = ObuHeaderMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParameterBlockObuMetadata {
    return {
      parameterId: isSet(object.parameterId) ? globalThis.Number(object.parameterId) : 0,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      numSubblocks: isSet(object.numSubblocks) ? globalThis.Number(object.numSubblocks) : 0,
      constantSubblockDuration: isSet(object.constantSubblockDuration)
        ? globalThis.Number(object.constantSubblockDuration)
        : 0,
      subblocks: globalThis.Array.isArray(object?.subblocks)
        ? object.subblocks.map((e: any) => ParameterSubblock.fromJSON(e))
        : [],
      startTimestamp: isSet(object.startTimestamp) ? globalThis.Number(object.startTimestamp) : 0,
      obuHeader: isSet(object.obuHeader) ? ObuHeaderMetadata.fromJSON(object.obuHeader) : undefined,
    };
  },

  toJSON(message: ParameterBlockObuMetadata): unknown {
    const obj: any = {};
    if (message.parameterId !== undefined && message.parameterId !== 0) {
      obj.parameterId = Math.round(message.parameterId);
    }
    if (message.duration !== undefined && message.duration !== 0) {
      obj.duration = Math.round(message.duration);
    }
    if (message.numSubblocks !== undefined && message.numSubblocks !== 0) {
      obj.numSubblocks = Math.round(message.numSubblocks);
    }
    if (message.constantSubblockDuration !== undefined && message.constantSubblockDuration !== 0) {
      obj.constantSubblockDuration = Math.round(message.constantSubblockDuration);
    }
    if (message.subblocks?.length) {
      obj.subblocks = message.subblocks.map((e) => ParameterSubblock.toJSON(e));
    }
    if (message.startTimestamp !== undefined && message.startTimestamp !== 0) {
      obj.startTimestamp = Math.round(message.startTimestamp);
    }
    if (message.obuHeader !== undefined) {
      obj.obuHeader = ObuHeaderMetadata.toJSON(message.obuHeader);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ParameterBlockObuMetadata>, I>>(base?: I): ParameterBlockObuMetadata {
    return ParameterBlockObuMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ParameterBlockObuMetadata>, I>>(object: I): ParameterBlockObuMetadata {
    const message = createBaseParameterBlockObuMetadata();
    message.parameterId = object.parameterId ?? 0;
    message.duration = object.duration ?? 0;
    message.numSubblocks = object.numSubblocks ?? 0;
    message.constantSubblockDuration = object.constantSubblockDuration ?? 0;
    message.subblocks = object.subblocks?.map((e) => ParameterSubblock.fromPartial(e)) || [];
    message.startTimestamp = object.startTimestamp ?? 0;
    message.obuHeader = (object.obuHeader !== undefined && object.obuHeader !== null)
      ? ObuHeaderMetadata.fromPartial(object.obuHeader)
      : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
